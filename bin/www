#!/usr/bin/env node
/* eslint-disable linebreak-style */
/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("back:server");
var http = require("http");

var https = require("https");

var fs = require("fs");
var privateKey = fs.readFileSync(process.env.CERTKEY, 'utf-8');
var certificate = fs.readFileSync(process.env.CERTFILE, 'utf-8');
var cab = fs.readFileSync(process.env.INTCERTFILE, 'utf-8');
var chainLines = cab.split("\n");
var cert = [];
var cabundle = [];
chainLines.forEach(function(line) {
  cert.push(line);
  if (line.match(/-END CERTIFICATE-/)) {
    cabundle.push(cert.join("\n"));
    cert = [];
  }
});

var options = {
  "key": privateKey,
  "cert": certificate,
  "ca": cab
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", 3002);
/**
 * Create HTTPS server.
 */

https
  .createServer(options, app, function (req, res) {
    res.end("secure!");
  })
  .listen(3002);

/**
 * Create HTTP server.
 */
app.set("port", port);
var server = http.createServer(function (req, res) {
  res.writeHead(301, { Location: "https://" + req.headers["host"] + req.url });
  res.end();
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
