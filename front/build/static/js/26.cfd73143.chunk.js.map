{"version":3,"sources":["../node_modules/codemirror/mode/haskell-literate/haskell-literate.js","../node_modules/codemirror/mode/haskell/haskell.js"],"names":["CodeMirror","defineMode","config","parserConfig","baseMode","getMode","base","startState","inCode","baseState","token","stream","state","sol","eat","skipToEnd","innerMode","mode","defineMIME","mod","_config","modeConfig","switchState","source","setState","f","smallRE","largeRE","digitRE","hexitRE","octitRE","idRE","symbolRE","specialRE","whiteCharRE","normal","eatWhile","ch","next","test","t","ncomment","type","nest","currNest","eol","stringLiteral","match","stringGap","wellKnownWords","wkw","setType","i","arguments","length","override","overrideKeywords","word","hasOwnProperty","copyState","s","w","current","blockCommentStart","blockCommentEnd","lineComment"],"mappings":"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","file":"static/js/26.cfd73143.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../haskell/haskell\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../haskell/haskell\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"haskell-literate\", function (config, parserConfig) {\n    var baseMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || \"haskell\");\n    return {\n      startState: function startState() {\n        return {\n          inCode: false,\n          baseState: CodeMirror.startState(baseMode)\n        };\n      },\n      token: function token(stream, state) {\n        if (stream.sol()) {\n          if (state.inCode = stream.eat(\">\")) return \"meta\";\n        }\n\n        if (state.inCode) {\n          return baseMode.token(stream, state.baseState);\n        } else {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      },\n      innerMode: function innerMode(state) {\n        return state.inCode ? {\n          state: state.baseState,\n          mode: baseMode\n        } : null;\n      }\n    };\n  }, \"haskell\");\n  CodeMirror.defineMIME(\"text/x-literate-haskell\", \"haskell-literate\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"haskell\", function (_config, modeConfig) {\n    function switchState(source, setState, f) {\n      setState(f);\n      return f(source, setState);\n    } // These should all be Unicode extended, as per the Haskell 2010 report\n\n\n    var smallRE = /[a-z_]/;\n    var largeRE = /[A-Z]/;\n    var digitRE = /\\d/;\n    var hexitRE = /[0-9A-Fa-f]/;\n    var octitRE = /[0-7]/;\n    var idRE = /[a-z_A-Z0-9'\\xa1-\\uffff]/;\n    var symbolRE = /[-!#$%&*+.\\/<=>?@\\\\^|~:]/;\n    var specialRE = /[(),;[\\]`{}]/;\n    var whiteCharRE = /[ \\t\\v\\f]/; // newlines are handled in tokenizer\n\n    function normal(source, setState) {\n      if (source.eatWhile(whiteCharRE)) {\n        return null;\n      }\n\n      var ch = source.next();\n\n      if (specialRE.test(ch)) {\n        if (ch == '{' && source.eat('-')) {\n          var t = \"comment\";\n\n          if (source.eat('#')) {\n            t = \"meta\";\n          }\n\n          return switchState(source, setState, ncomment(t, 1));\n        }\n\n        return null;\n      }\n\n      if (ch == '\\'') {\n        if (source.eat('\\\\')) {\n          source.next(); // should handle other escapes here\n        } else {\n          source.next();\n        }\n\n        if (source.eat('\\'')) {\n          return \"string\";\n        }\n\n        return \"string error\";\n      }\n\n      if (ch == '\"') {\n        return switchState(source, setState, stringLiteral);\n      }\n\n      if (largeRE.test(ch)) {\n        source.eatWhile(idRE);\n\n        if (source.eat('.')) {\n          return \"qualifier\";\n        }\n\n        return \"variable-2\";\n      }\n\n      if (smallRE.test(ch)) {\n        source.eatWhile(idRE);\n        return \"variable\";\n      }\n\n      if (digitRE.test(ch)) {\n        if (ch == '0') {\n          if (source.eat(/[xX]/)) {\n            source.eatWhile(hexitRE); // should require at least 1\n\n            return \"integer\";\n          }\n\n          if (source.eat(/[oO]/)) {\n            source.eatWhile(octitRE); // should require at least 1\n\n            return \"number\";\n          }\n        }\n\n        source.eatWhile(digitRE);\n        var t = \"number\";\n\n        if (source.match(/^\\.\\d+/)) {\n          t = \"number\";\n        }\n\n        if (source.eat(/[eE]/)) {\n          t = \"number\";\n          source.eat(/[-+]/);\n          source.eatWhile(digitRE); // should require at least 1\n        }\n\n        return t;\n      }\n\n      if (ch == \".\" && source.eat(\".\")) return \"keyword\";\n\n      if (symbolRE.test(ch)) {\n        if (ch == '-' && source.eat(/-/)) {\n          source.eatWhile(/-/);\n\n          if (!source.eat(symbolRE)) {\n            source.skipToEnd();\n            return \"comment\";\n          }\n        }\n\n        var t = \"variable\";\n\n        if (ch == ':') {\n          t = \"variable-2\";\n        }\n\n        source.eatWhile(symbolRE);\n        return t;\n      }\n\n      return \"error\";\n    }\n\n    function ncomment(type, nest) {\n      if (nest == 0) {\n        return normal;\n      }\n\n      return function (source, setState) {\n        var currNest = nest;\n\n        while (!source.eol()) {\n          var ch = source.next();\n\n          if (ch == '{' && source.eat('-')) {\n            ++currNest;\n          } else if (ch == '-' && source.eat('}')) {\n            --currNest;\n\n            if (currNest == 0) {\n              setState(normal);\n              return type;\n            }\n          }\n        }\n\n        setState(ncomment(type, currNest));\n        return type;\n      };\n    }\n\n    function stringLiteral(source, setState) {\n      while (!source.eol()) {\n        var ch = source.next();\n\n        if (ch == '\"') {\n          setState(normal);\n          return \"string\";\n        }\n\n        if (ch == '\\\\') {\n          if (source.eol() || source.eat(whiteCharRE)) {\n            setState(stringGap);\n            return \"string\";\n          }\n\n          if (source.eat('&')) {} else {\n            source.next(); // should handle other escapes here\n          }\n        }\n      }\n\n      setState(normal);\n      return \"string error\";\n    }\n\n    function stringGap(source, setState) {\n      if (source.eat('\\\\')) {\n        return switchState(source, setState, stringLiteral);\n      }\n\n      source.next();\n      setState(normal);\n      return \"error\";\n    }\n\n    var wellKnownWords = function () {\n      var wkw = {};\n\n      function setType(t) {\n        return function () {\n          for (var i = 0; i < arguments.length; i++) {\n            wkw[arguments[i]] = t;\n          }\n        };\n      }\n\n      setType(\"keyword\")(\"case\", \"class\", \"data\", \"default\", \"deriving\", \"do\", \"else\", \"foreign\", \"if\", \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instance\", \"let\", \"module\", \"newtype\", \"of\", \"then\", \"type\", \"where\", \"_\");\n      setType(\"keyword\")(\"\\.\\.\", \":\", \"::\", \"=\", \"\\\\\", \"<-\", \"->\", \"@\", \"~\", \"=>\");\n      setType(\"builtin\")(\"!!\", \"$!\", \"$\", \"&&\", \"+\", \"++\", \"-\", \".\", \"/\", \"/=\", \"<\", \"<*\", \"<=\", \"<$>\", \"<*>\", \"=<<\", \"==\", \">\", \">=\", \">>\", \">>=\", \"^\", \"^^\", \"||\", \"*\", \"*>\", \"**\");\n      setType(\"builtin\")(\"Applicative\", \"Bool\", \"Bounded\", \"Char\", \"Double\", \"EQ\", \"Either\", \"Enum\", \"Eq\", \"False\", \"FilePath\", \"Float\", \"Floating\", \"Fractional\", \"Functor\", \"GT\", \"IO\", \"IOError\", \"Int\", \"Integer\", \"Integral\", \"Just\", \"LT\", \"Left\", \"Maybe\", \"Monad\", \"Nothing\", \"Num\", \"Ord\", \"Ordering\", \"Rational\", \"Read\", \"ReadS\", \"Real\", \"RealFloat\", \"RealFrac\", \"Right\", \"Show\", \"ShowS\", \"String\", \"True\");\n      setType(\"builtin\")(\"abs\", \"acos\", \"acosh\", \"all\", \"and\", \"any\", \"appendFile\", \"asTypeOf\", \"asin\", \"asinh\", \"atan\", \"atan2\", \"atanh\", \"break\", \"catch\", \"ceiling\", \"compare\", \"concat\", \"concatMap\", \"const\", \"cos\", \"cosh\", \"curry\", \"cycle\", \"decodeFloat\", \"div\", \"divMod\", \"drop\", \"dropWhile\", \"either\", \"elem\", \"encodeFloat\", \"enumFrom\", \"enumFromThen\", \"enumFromThenTo\", \"enumFromTo\", \"error\", \"even\", \"exp\", \"exponent\", \"fail\", \"filter\", \"flip\", \"floatDigits\", \"floatRadix\", \"floatRange\", \"floor\", \"fmap\", \"foldl\", \"foldl1\", \"foldr\", \"foldr1\", \"fromEnum\", \"fromInteger\", \"fromIntegral\", \"fromRational\", \"fst\", \"gcd\", \"getChar\", \"getContents\", \"getLine\", \"head\", \"id\", \"init\", \"interact\", \"ioError\", \"isDenormalized\", \"isIEEE\", \"isInfinite\", \"isNaN\", \"isNegativeZero\", \"iterate\", \"last\", \"lcm\", \"length\", \"lex\", \"lines\", \"log\", \"logBase\", \"lookup\", \"map\", \"mapM\", \"mapM_\", \"max\", \"maxBound\", \"maximum\", \"maybe\", \"min\", \"minBound\", \"minimum\", \"mod\", \"negate\", \"not\", \"notElem\", \"null\", \"odd\", \"or\", \"otherwise\", \"pi\", \"pred\", \"print\", \"product\", \"properFraction\", \"pure\", \"putChar\", \"putStr\", \"putStrLn\", \"quot\", \"quotRem\", \"read\", \"readFile\", \"readIO\", \"readList\", \"readLn\", \"readParen\", \"reads\", \"readsPrec\", \"realToFrac\", \"recip\", \"rem\", \"repeat\", \"replicate\", \"return\", \"reverse\", \"round\", \"scaleFloat\", \"scanl\", \"scanl1\", \"scanr\", \"scanr1\", \"seq\", \"sequence\", \"sequence_\", \"show\", \"showChar\", \"showList\", \"showParen\", \"showString\", \"shows\", \"showsPrec\", \"significand\", \"signum\", \"sin\", \"sinh\", \"snd\", \"span\", \"splitAt\", \"sqrt\", \"subtract\", \"succ\", \"sum\", \"tail\", \"take\", \"takeWhile\", \"tan\", \"tanh\", \"toEnum\", \"toInteger\", \"toRational\", \"truncate\", \"uncurry\", \"undefined\", \"unlines\", \"until\", \"unwords\", \"unzip\", \"unzip3\", \"userError\", \"words\", \"writeFile\", \"zip\", \"zip3\", \"zipWith\", \"zipWith3\");\n      var override = modeConfig.overrideKeywords;\n      if (override) for (var word in override) {\n        if (override.hasOwnProperty(word)) wkw[word] = override[word];\n      }\n      return wkw;\n    }();\n\n    return {\n      startState: function startState() {\n        return {\n          f: normal\n        };\n      },\n      copyState: function copyState(s) {\n        return {\n          f: s.f\n        };\n      },\n      token: function token(stream, state) {\n        var t = state.f(stream, function (s) {\n          state.f = s;\n        });\n        var w = stream.current();\n        return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;\n      },\n      blockCommentStart: \"{-\",\n      blockCommentEnd: \"-}\",\n      lineComment: \"--\"\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-haskell\", \"haskell\");\n});"],"sourceRoot":""}