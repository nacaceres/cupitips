{"version":3,"sources":["../node_modules/codemirror/mode/markdown/markdown.js","../node_modules/codemirror/mode/xml/xml.js"],"names":["CodeMirror","defineMode","cmCfg","modeCfg","htmlMode","getMode","htmlModeMissing","name","undefined","highlightFormatting","maxBlockquoteDepth","taskLists","strikethrough","emoji","fencedCodeBlockHighlighting","fencedCodeBlockDefaultMode","xml","tokenTypeOverrides","tokenTypes","header","code","quote","list1","list2","list3","hr","image","imageAltText","imageMarker","formatting","linkInline","linkEmail","linkText","linkHref","em","strong","tokenType","hasOwnProperty","hrRE","listRE","taskListRE","atxHeaderRE","allowAtxHeaderWithoutSpace","setextHeaderRE","textRE","fencedCodeRE","linkDefRE","punctuation","switchInline","stream","state","f","inline","switchBlock","block","blankLine","linkTitle","indentedCode","htmlBlock","exit","inner","innerMode","htmlState","mode","tagStart","context","tokenize","isInText","inlineNormal","blockNormal","trailingSpace","trailingSpaceNewLine","prevLine","thisLine","line","firstTokenOnLine","column","indentation","prevLineLineIsEmpty","test","string","prevLineIsIndentedCode","prevLineIsHr","prevLineIsList","list","maxNonCodeIndentation","listStack","length","lineIndentation","indentationDiff","pop","allowsInlineContinuation","fencedCodeEnd","isHr","match","skipToEnd","eatSpace","getType","eat","setext","listType","current","push","taskList","fencedEndRE","RegExp","localMode","findModeByName","found","mime","mimes","localState","startState","local","lookAhead","charAt","peek","footnoteLink","style","token","md_inside","indexOf","returnType","currListInd","hasExitedList","maxFencedEndInd","styles","i","taskOpen","join","taskClosed","listMod","handleText","text","ch","next","matchCh","regex","replace","previousFormatting","eatWhile","count","t","type","formattingEscape","end","pos","atts","substring","start","backUp","len","before","after","leftFlanking","rightFlanking","setEm","setStrong","retType","endChar","returnState","linkRE","footnoteLinkInside","footnoteUrl","copyState","s","slice","indent","textAfter","Pass","blockCommentStart","blockCommentEnd","closeBrackets","fold","defineMIME","mod","htmlConfig","autoSelfClosers","implicitlyClosed","contextGrabbers","doNotIndent","allowUnquoted","allowMissing","caseFold","xmlConfig","allowMissingTagName","editorConf","config_","setStyle","indentUnit","config","defaults","prop","inText","chain","parser","inBlock","doctype","depth","inTag","baseState","tagName","closure","eol","isInAttribute","inAttribute","stringStartCol","terminator","Context","startOfLine","this","prev","indented","noIndent","popContext","maybePopContext","nextTagName","parentTagName","tagNameState","closeTagNameState","attrState","matchClosing","closeState","closeStateErr","_stream","attrEqState","attrValueState","attrContinuedState","baseIndent","sol","fullLine","multilineTagIndentPastTag","multilineTagIndentFactor","alignCDATA","tagAfter","exec","grabbers","electricInput","configuration","helperType","skipAttribute","xmlCurrentTag","close","xmlCurrentContext","cx","reverse","mimeModes"],"mappings":"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","file":"static/js/4.aa92a4bc.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../meta\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../meta\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"markdown\", function (cmCfg, modeCfg) {\n    var htmlMode = CodeMirror.getMode(cmCfg, \"text/html\");\n    var htmlModeMissing = htmlMode.name == \"null\";\n\n    function getMode(name) {\n      if (CodeMirror.findModeByName) {\n        var found = CodeMirror.findModeByName(name);\n        if (found) name = found.mime || found.mimes[0];\n      }\n\n      var mode = CodeMirror.getMode(cmCfg, name);\n      return mode.name == \"null\" ? null : mode;\n    } // Should characters that affect highlighting be highlighted separate?\n    // Does not include characters that will be output (such as `1.` and `-` for lists)\n\n\n    if (modeCfg.highlightFormatting === undefined) modeCfg.highlightFormatting = false; // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n    // Excess `>` will emit `error` token.\n\n    if (modeCfg.maxBlockquoteDepth === undefined) modeCfg.maxBlockquoteDepth = 0; // Turn on task lists? (\"- [ ] \" and \"- [x] \")\n\n    if (modeCfg.taskLists === undefined) modeCfg.taskLists = false; // Turn on strikethrough syntax\n\n    if (modeCfg.strikethrough === undefined) modeCfg.strikethrough = false;\n    if (modeCfg.emoji === undefined) modeCfg.emoji = false;\n    if (modeCfg.fencedCodeBlockHighlighting === undefined) modeCfg.fencedCodeBlockHighlighting = true;\n    if (modeCfg.fencedCodeBlockDefaultMode === undefined) modeCfg.fencedCodeBlockDefaultMode = 'text/plain';\n    if (modeCfg.xml === undefined) modeCfg.xml = true; // Allow token types to be overridden by user-provided token types.\n\n    if (modeCfg.tokenTypeOverrides === undefined) modeCfg.tokenTypeOverrides = {};\n    var tokenTypes = {\n      header: \"header\",\n      code: \"comment\",\n      quote: \"quote\",\n      list1: \"variable-2\",\n      list2: \"variable-3\",\n      list3: \"keyword\",\n      hr: \"hr\",\n      image: \"image\",\n      imageAltText: \"image-alt-text\",\n      imageMarker: \"image-marker\",\n      formatting: \"formatting\",\n      linkInline: \"link\",\n      linkEmail: \"link\",\n      linkText: \"link\",\n      linkHref: \"string\",\n      em: \"em\",\n      strong: \"strong\",\n      strikethrough: \"strikethrough\",\n      emoji: \"builtin\"\n    };\n\n    for (var tokenType in tokenTypes) {\n      if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {\n        tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];\n      }\n    }\n\n    var hrRE = /^([*\\-_])(?:\\s*\\1){2,}\\s*$/,\n        listRE = /^(?:[*\\-+]|^[0-9]+([.)]))\\s+/,\n        taskListRE = /^\\[(x| )\\](?=\\s)/i // Must follow listRE\n    ,\n        atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/,\n        setextHeaderRE = /^ {0,3}(?:\\={1,}|-{2,})\\s*$/,\n        textRE = /^[^#!\\[\\]*_\\\\<>` \"'(~:]+/,\n        fencedCodeRE = /^(~~~+|```+)[ \\t]*([\\w\\/+#-]*)[^\\n`]*$/,\n        linkDefRE = /^\\s*\\[[^\\]]+?\\]:.*$/ // naive link-definition\n    ,\n        punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/,\n        expandedTab = \"    \"; // CommonMark specifies tab as 4 spaces\n\n    function switchInline(stream, state, f) {\n      state.f = state.inline = f;\n      return f(stream, state);\n    }\n\n    function switchBlock(stream, state, f) {\n      state.f = state.block = f;\n      return f(stream, state);\n    }\n\n    function lineIsEmpty(line) {\n      return !line || !/\\S/.test(line.string);\n    } // Blocks\n\n\n    function blankLine(state) {\n      // Reset linkTitle state\n      state.linkTitle = false;\n      state.linkHref = false;\n      state.linkText = false; // Reset EM state\n\n      state.em = false; // Reset STRONG state\n\n      state.strong = false; // Reset strikethrough state\n\n      state.strikethrough = false; // Reset state.quote\n\n      state.quote = 0; // Reset state.indentedCode\n\n      state.indentedCode = false;\n\n      if (state.f == htmlBlock) {\n        var exit = htmlModeMissing;\n\n        if (!exit) {\n          var inner = CodeMirror.innerMode(htmlMode, state.htmlState);\n          exit = inner.mode.name == \"xml\" && inner.state.tagStart === null && !inner.state.context && inner.state.tokenize.isInText;\n        }\n\n        if (exit) {\n          state.f = inlineNormal;\n          state.block = blockNormal;\n          state.htmlState = null;\n        }\n      } // Reset state.trailingSpace\n\n\n      state.trailingSpace = 0;\n      state.trailingSpaceNewLine = false; // Mark this line as blank\n\n      state.prevLine = state.thisLine;\n      state.thisLine = {\n        stream: null\n      };\n      return null;\n    }\n\n    function blockNormal(stream, state) {\n      var firstTokenOnLine = stream.column() === state.indentation;\n      var prevLineLineIsEmpty = lineIsEmpty(state.prevLine.stream);\n      var prevLineIsIndentedCode = state.indentedCode;\n      var prevLineIsHr = state.prevLine.hr;\n      var prevLineIsList = state.list !== false;\n      var maxNonCodeIndentation = (state.listStack[state.listStack.length - 1] || 0) + 3;\n      state.indentedCode = false;\n      var lineIndentation = state.indentation; // compute once per line (on first token)\n\n      if (state.indentationDiff === null) {\n        state.indentationDiff = state.indentation;\n\n        if (prevLineIsList) {\n          state.list = null; // While this list item's marker's indentation is less than the deepest\n          //  list item's content's indentation,pop the deepest list item\n          //  indentation off the stack, and update block indentation state\n\n          while (lineIndentation < state.listStack[state.listStack.length - 1]) {\n            state.listStack.pop();\n\n            if (state.listStack.length) {\n              state.indentation = state.listStack[state.listStack.length - 1]; // less than the first list's indent -> the line is no longer a list\n            } else {\n              state.list = false;\n            }\n          }\n\n          if (state.list !== false) {\n            state.indentationDiff = lineIndentation - state.listStack[state.listStack.length - 1];\n          }\n        }\n      } // not comprehensive (currently only for setext detection purposes)\n\n\n      var allowsInlineContinuation = !prevLineLineIsEmpty && !prevLineIsHr && !state.prevLine.header && (!prevLineIsList || !prevLineIsIndentedCode) && !state.prevLine.fencedCodeEnd;\n      var isHr = (state.list === false || prevLineIsHr || prevLineLineIsEmpty) && state.indentation <= maxNonCodeIndentation && stream.match(hrRE);\n      var match = null;\n\n      if (state.indentationDiff >= 4 && (prevLineIsIndentedCode || state.prevLine.fencedCodeEnd || state.prevLine.header || prevLineLineIsEmpty)) {\n        stream.skipToEnd();\n        state.indentedCode = true;\n        return tokenTypes.code;\n      } else if (stream.eatSpace()) {\n        return null;\n      } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(atxHeaderRE)) && match[1].length <= 6) {\n        state.quote = 0;\n        state.header = match[1].length;\n        state.thisLine.header = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        state.f = state.inline;\n        return getType(state);\n      } else if (state.indentation <= maxNonCodeIndentation && stream.eat('>')) {\n        state.quote = firstTokenOnLine ? 1 : state.quote + 1;\n        if (modeCfg.highlightFormatting) state.formatting = \"quote\";\n        stream.eatSpace();\n        return getType(state);\n      } else if (!isHr && !state.setext && firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(listRE))) {\n        var listType = match[1] ? \"ol\" : \"ul\";\n        state.indentation = lineIndentation + stream.current().length;\n        state.list = true;\n        state.quote = 0; // Add this list item's content's indentation to the stack\n\n        state.listStack.push(state.indentation); // Reset inline styles which shouldn't propagate aross list items\n\n        state.em = false;\n        state.strong = false;\n        state.code = false;\n        state.strikethrough = false;\n\n        if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n          state.taskList = true;\n        }\n\n        state.f = state.inline;\n        if (modeCfg.highlightFormatting) state.formatting = [\"list\", \"list-\" + listType];\n        return getType(state);\n      } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(fencedCodeRE, true))) {\n        state.quote = 0;\n        state.fencedEndRE = new RegExp(match[1] + \"+ *$\"); // try switching mode\n\n        state.localMode = modeCfg.fencedCodeBlockHighlighting && getMode(match[2] || modeCfg.fencedCodeBlockDefaultMode);\n        if (state.localMode) state.localState = CodeMirror.startState(state.localMode);\n        state.f = state.block = local;\n        if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n        state.code = -1;\n        return getType(state); // SETEXT has lowest block-scope precedence after HR, so check it after\n        //  the others (code, blockquote, list...)\n      } else if ( // if setext set, indicates line after ---/===\n      state.setext || // line before ---/===\n      (!allowsInlineContinuation || !prevLineIsList) && !state.quote && state.list === false && !state.code && !isHr && !linkDefRE.test(stream.string) && (match = stream.lookAhead(1)) && (match = match.match(setextHeaderRE))) {\n        if (!state.setext) {\n          state.header = match[0].charAt(0) == '=' ? 1 : 2;\n          state.setext = state.header;\n        } else {\n          state.header = state.setext; // has no effect on type so we can reset it now\n\n          state.setext = 0;\n          stream.skipToEnd();\n          if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        }\n\n        state.thisLine.header = true;\n        state.f = state.inline;\n        return getType(state);\n      } else if (isHr) {\n        stream.skipToEnd();\n        state.hr = true;\n        state.thisLine.hr = true;\n        return tokenTypes.hr;\n      } else if (stream.peek() === '[') {\n        return switchInline(stream, state, footnoteLink);\n      }\n\n      return switchInline(stream, state, state.inline);\n    }\n\n    function htmlBlock(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState);\n\n      if (!htmlModeMissing) {\n        var inner = CodeMirror.innerMode(htmlMode, state.htmlState);\n\n        if (inner.mode.name == \"xml\" && inner.state.tagStart === null && !inner.state.context && inner.state.tokenize.isInText || state.md_inside && stream.current().indexOf(\">\") > -1) {\n          state.f = inlineNormal;\n          state.block = blockNormal;\n          state.htmlState = null;\n        }\n      }\n\n      return style;\n    }\n\n    function local(stream, state) {\n      var currListInd = state.listStack[state.listStack.length - 1] || 0;\n      var hasExitedList = state.indentation < currListInd;\n      var maxFencedEndInd = currListInd + 3;\n\n      if (state.fencedEndRE && state.indentation <= maxFencedEndInd && (hasExitedList || stream.match(state.fencedEndRE))) {\n        if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n        var returnType;\n        if (!hasExitedList) returnType = getType(state);\n        state.localMode = state.localState = null;\n        state.block = blockNormal;\n        state.f = inlineNormal;\n        state.fencedEndRE = null;\n        state.code = 0;\n        state.thisLine.fencedCodeEnd = true;\n        if (hasExitedList) return switchBlock(stream, state, state.block);\n        return returnType;\n      } else if (state.localMode) {\n        return state.localMode.token(stream, state.localState);\n      } else {\n        stream.skipToEnd();\n        return tokenTypes.code;\n      }\n    } // Inline\n\n\n    function getType(state) {\n      var styles = [];\n\n      if (state.formatting) {\n        styles.push(tokenTypes.formatting);\n        if (typeof state.formatting === \"string\") state.formatting = [state.formatting];\n\n        for (var i = 0; i < state.formatting.length; i++) {\n          styles.push(tokenTypes.formatting + \"-\" + state.formatting[i]);\n\n          if (state.formatting[i] === \"header\") {\n            styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.header);\n          } // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n          // Add `error` instead if the maximum blockquote nesting depth is passed\n\n\n          if (state.formatting[i] === \"quote\") {\n            if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n              styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.quote);\n            } else {\n              styles.push(\"error\");\n            }\n          }\n        }\n      }\n\n      if (state.taskOpen) {\n        styles.push(\"meta\");\n        return styles.length ? styles.join(' ') : null;\n      }\n\n      if (state.taskClosed) {\n        styles.push(\"property\");\n        return styles.length ? styles.join(' ') : null;\n      }\n\n      if (state.linkHref) {\n        styles.push(tokenTypes.linkHref, \"url\");\n      } else {\n        // Only apply inline styles to non-url text\n        if (state.strong) {\n          styles.push(tokenTypes.strong);\n        }\n\n        if (state.em) {\n          styles.push(tokenTypes.em);\n        }\n\n        if (state.strikethrough) {\n          styles.push(tokenTypes.strikethrough);\n        }\n\n        if (state.emoji) {\n          styles.push(tokenTypes.emoji);\n        }\n\n        if (state.linkText) {\n          styles.push(tokenTypes.linkText);\n        }\n\n        if (state.code) {\n          styles.push(tokenTypes.code);\n        }\n\n        if (state.image) {\n          styles.push(tokenTypes.image);\n        }\n\n        if (state.imageAltText) {\n          styles.push(tokenTypes.imageAltText, \"link\");\n        }\n\n        if (state.imageMarker) {\n          styles.push(tokenTypes.imageMarker);\n        }\n      }\n\n      if (state.header) {\n        styles.push(tokenTypes.header, tokenTypes.header + \"-\" + state.header);\n      }\n\n      if (state.quote) {\n        styles.push(tokenTypes.quote); // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n\n        if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n          styles.push(tokenTypes.quote + \"-\" + state.quote);\n        } else {\n          styles.push(tokenTypes.quote + \"-\" + modeCfg.maxBlockquoteDepth);\n        }\n      }\n\n      if (state.list !== false) {\n        var listMod = (state.listStack.length - 1) % 3;\n\n        if (!listMod) {\n          styles.push(tokenTypes.list1);\n        } else if (listMod === 1) {\n          styles.push(tokenTypes.list2);\n        } else {\n          styles.push(tokenTypes.list3);\n        }\n      }\n\n      if (state.trailingSpaceNewLine) {\n        styles.push(\"trailing-space-new-line\");\n      } else if (state.trailingSpace) {\n        styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\n      }\n\n      return styles.length ? styles.join(' ') : null;\n    }\n\n    function handleText(stream, state) {\n      if (stream.match(textRE, true)) {\n        return getType(state);\n      }\n\n      return undefined;\n    }\n\n    function inlineNormal(stream, state) {\n      var style = state.text(stream, state);\n      if (typeof style !== 'undefined') return style;\n\n      if (state.list) {\n        // List marker (*, +, -, 1., etc)\n        state.list = null;\n        return getType(state);\n      }\n\n      if (state.taskList) {\n        var taskOpen = stream.match(taskListRE, true)[1] === \" \";\n        if (taskOpen) state.taskOpen = true;else state.taskClosed = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"task\";\n        state.taskList = false;\n        return getType(state);\n      }\n\n      state.taskOpen = false;\n      state.taskClosed = false;\n\n      if (state.header && stream.match(/^#+$/, true)) {\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        return getType(state);\n      }\n\n      var ch = stream.next(); // Matches link titles present on next line\n\n      if (state.linkTitle) {\n        state.linkTitle = false;\n        var matchCh = ch;\n\n        if (ch === '(') {\n          matchCh = ')';\n        }\n\n        matchCh = (matchCh + '').replace(/([.?*+^\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n        var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\n\n        if (stream.match(new RegExp(regex), true)) {\n          return tokenTypes.linkHref;\n        }\n      } // If this block is changed, it may need to be updated in GFM mode\n\n\n      if (ch === '`') {\n        var previousFormatting = state.formatting;\n        if (modeCfg.highlightFormatting) state.formatting = \"code\";\n        stream.eatWhile('`');\n        var count = stream.current().length;\n\n        if (state.code == 0 && (!state.quote || count == 1)) {\n          state.code = count;\n          return getType(state);\n        } else if (count == state.code) {\n          // Must be exact\n          var t = getType(state);\n          state.code = 0;\n          return t;\n        } else {\n          state.formatting = previousFormatting;\n          return getType(state);\n        }\n      } else if (state.code) {\n        return getType(state);\n      }\n\n      if (ch === '\\\\') {\n        stream.next();\n\n        if (modeCfg.highlightFormatting) {\n          var type = getType(state);\n          var formattingEscape = tokenTypes.formatting + \"-escape\";\n          return type ? type + \" \" + formattingEscape : formattingEscape;\n        }\n      }\n\n      if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n        state.imageMarker = true;\n        state.image = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        return getType(state);\n      }\n\n      if (ch === '[' && state.imageMarker && stream.match(/[^\\]]*\\](\\(.*?\\)| ?\\[.*?\\])/, false)) {\n        state.imageMarker = false;\n        state.imageAltText = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        return getType(state);\n      }\n\n      if (ch === ']' && state.imageAltText) {\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        var type = getType(state);\n        state.imageAltText = false;\n        state.image = false;\n        state.inline = state.f = linkHref;\n        return type;\n      }\n\n      if (ch === '[' && !state.image) {\n        if (state.linkText && stream.match(/^.*?\\]/)) return getType(state);\n        state.linkText = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        return getType(state);\n      }\n\n      if (ch === ']' && state.linkText) {\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n        state.linkText = false;\n        state.inline = state.f = stream.match(/\\(.*?\\)| ?\\[.*?\\]/, false) ? linkHref : inlineNormal;\n        return type;\n      }\n\n      if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n        state.f = state.inline = linkInline;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkInline;\n      }\n\n      if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n        state.f = state.inline = linkInline;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkEmail;\n      }\n\n      if (modeCfg.xml && ch === '<' && stream.match(/^(!--|\\?|!\\[CDATA\\[|[a-z][a-z0-9-]*(?:\\s+[a-z_:.\\-]+(?:\\s*=\\s*[^>]+)?)*\\s*(?:>|$))/i, false)) {\n        var end = stream.string.indexOf(\">\", stream.pos);\n\n        if (end != -1) {\n          var atts = stream.string.substring(stream.start, end);\n          if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) state.md_inside = true;\n        }\n\n        stream.backUp(1);\n        state.htmlState = CodeMirror.startState(htmlMode);\n        return switchBlock(stream, state, htmlBlock);\n      }\n\n      if (modeCfg.xml && ch === '<' && stream.match(/^\\/\\w*?>/)) {\n        state.md_inside = false;\n        return \"tag\";\n      } else if (ch === \"*\" || ch === \"_\") {\n        var len = 1,\n            before = stream.pos == 1 ? \" \" : stream.string.charAt(stream.pos - 2);\n\n        while (len < 3 && stream.eat(ch)) {\n          len++;\n        }\n\n        var after = stream.peek() || \" \"; // See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis\n\n        var leftFlanking = !/\\s/.test(after) && (!punctuation.test(after) || /\\s/.test(before) || punctuation.test(before));\n        var rightFlanking = !/\\s/.test(before) && (!punctuation.test(before) || /\\s/.test(after) || punctuation.test(after));\n        var setEm = null,\n            setStrong = null;\n\n        if (len % 2) {\n          // Em\n          if (!state.em && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before))) setEm = true;else if (state.em == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after))) setEm = false;\n        }\n\n        if (len > 1) {\n          // Strong\n          if (!state.strong && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before))) setStrong = true;else if (state.strong == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after))) setStrong = false;\n        }\n\n        if (setStrong != null || setEm != null) {\n          if (modeCfg.highlightFormatting) state.formatting = setEm == null ? \"strong\" : setStrong == null ? \"em\" : \"strong em\";\n          if (setEm === true) state.em = ch;\n          if (setStrong === true) state.strong = ch;\n          var t = getType(state);\n          if (setEm === false) state.em = false;\n          if (setStrong === false) state.strong = false;\n          return t;\n        }\n      } else if (ch === ' ') {\n        if (stream.eat('*') || stream.eat('_')) {\n          // Probably surrounded by spaces\n          if (stream.peek() === ' ') {\n            // Surrounded by spaces, ignore\n            return getType(state);\n          } else {\n            // Not surrounded by spaces, back up pointer\n            stream.backUp(1);\n          }\n        }\n      }\n\n      if (modeCfg.strikethrough) {\n        if (ch === '~' && stream.eatWhile(ch)) {\n          if (state.strikethrough) {\n            // Remove strikethrough\n            if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n            var t = getType(state);\n            state.strikethrough = false;\n            return t;\n          } else if (stream.match(/^[^\\s]/, false)) {\n            // Add strikethrough\n            state.strikethrough = true;\n            if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n            return getType(state);\n          }\n        } else if (ch === ' ') {\n          if (stream.match(/^~~/, true)) {\n            // Probably surrounded by space\n            if (stream.peek() === ' ') {\n              // Surrounded by spaces, ignore\n              return getType(state);\n            } else {\n              // Not surrounded by spaces, back up pointer\n              stream.backUp(2);\n            }\n          }\n        }\n      }\n\n      if (modeCfg.emoji && ch === \":\" && stream.match(/^(?:[a-z_\\d+][a-z_\\d+-]*|\\-[a-z_\\d+][a-z_\\d+-]*):/)) {\n        state.emoji = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"emoji\";\n        var retType = getType(state);\n        state.emoji = false;\n        return retType;\n      }\n\n      if (ch === ' ') {\n        if (stream.match(/^ +$/, false)) {\n          state.trailingSpace++;\n        } else if (state.trailingSpace) {\n          state.trailingSpaceNewLine = true;\n        }\n      }\n\n      return getType(state);\n    }\n\n    function linkInline(stream, state) {\n      var ch = stream.next();\n\n      if (ch === \">\") {\n        state.f = state.inline = inlineNormal;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkInline;\n      }\n\n      stream.match(/^[^>]+/, true);\n      return tokenTypes.linkInline;\n    }\n\n    function linkHref(stream, state) {\n      // Check if space, and return NULL if so (to avoid marking the space)\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      var ch = stream.next();\n\n      if (ch === '(' || ch === '[') {\n        state.f = state.inline = getLinkHrefInside(ch === \"(\" ? \")\" : \"]\");\n        if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n        state.linkHref = true;\n        return getType(state);\n      }\n\n      return 'error';\n    }\n\n    var linkRE = {\n      \")\": /^(?:[^\\\\\\(\\)]|\\\\.|\\((?:[^\\\\\\(\\)]|\\\\.)*\\))*?(?=\\))/,\n      \"]\": /^(?:[^\\\\\\[\\]]|\\\\.|\\[(?:[^\\\\\\[\\]]|\\\\.)*\\])*?(?=\\])/\n    };\n\n    function getLinkHrefInside(endChar) {\n      return function (stream, state) {\n        var ch = stream.next();\n\n        if (ch === endChar) {\n          state.f = state.inline = inlineNormal;\n          if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n          var returnState = getType(state);\n          state.linkHref = false;\n          return returnState;\n        }\n\n        stream.match(linkRE[endChar]);\n        state.linkHref = true;\n        return getType(state);\n      };\n    }\n\n    function footnoteLink(stream, state) {\n      if (stream.match(/^([^\\]\\\\]|\\\\.)*\\]:/, false)) {\n        state.f = footnoteLinkInside;\n        stream.next(); // Consume [\n\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        state.linkText = true;\n        return getType(state);\n      }\n\n      return switchInline(stream, state, inlineNormal);\n    }\n\n    function footnoteLinkInside(stream, state) {\n      if (stream.match(/^\\]:/, true)) {\n        state.f = state.inline = footnoteUrl;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var returnType = getType(state);\n        state.linkText = false;\n        return returnType;\n      }\n\n      stream.match(/^([^\\]\\\\]|\\\\.)+/, true);\n      return tokenTypes.linkText;\n    }\n\n    function footnoteUrl(stream, state) {\n      // Check if space, and return NULL if so (to avoid marking the space)\n      if (stream.eatSpace()) {\n        return null;\n      } // Match URL\n\n\n      stream.match(/^[^\\s]+/, true); // Check for link title\n\n      if (stream.peek() === undefined) {\n        // End of line, set flag to check next line\n        state.linkTitle = true;\n      } else {\n        // More content on line, check if link title\n        stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\\\\\|\\\\.)+\"|'(?:[^'\\\\]|\\\\\\\\|\\\\.)+'|\\((?:[^)\\\\]|\\\\\\\\|\\\\.)+\\)))?/, true);\n      }\n\n      state.f = state.inline = inlineNormal;\n      return tokenTypes.linkHref + \" url\";\n    }\n\n    var mode = {\n      startState: function startState() {\n        return {\n          f: blockNormal,\n          prevLine: {\n            stream: null\n          },\n          thisLine: {\n            stream: null\n          },\n          block: blockNormal,\n          htmlState: null,\n          indentation: 0,\n          inline: inlineNormal,\n          text: handleText,\n          formatting: false,\n          linkText: false,\n          linkHref: false,\n          linkTitle: false,\n          code: 0,\n          em: false,\n          strong: false,\n          header: 0,\n          setext: 0,\n          hr: false,\n          taskList: false,\n          list: false,\n          listStack: [],\n          quote: 0,\n          trailingSpace: 0,\n          trailingSpaceNewLine: false,\n          strikethrough: false,\n          emoji: false,\n          fencedEndRE: null\n        };\n      },\n      copyState: function copyState(s) {\n        return {\n          f: s.f,\n          prevLine: s.prevLine,\n          thisLine: s.thisLine,\n          block: s.block,\n          htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n          indentation: s.indentation,\n          localMode: s.localMode,\n          localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n          inline: s.inline,\n          text: s.text,\n          formatting: false,\n          linkText: s.linkText,\n          linkTitle: s.linkTitle,\n          linkHref: s.linkHref,\n          code: s.code,\n          em: s.em,\n          strong: s.strong,\n          strikethrough: s.strikethrough,\n          emoji: s.emoji,\n          header: s.header,\n          setext: s.setext,\n          hr: s.hr,\n          taskList: s.taskList,\n          list: s.list,\n          listStack: s.listStack.slice(0),\n          quote: s.quote,\n          indentedCode: s.indentedCode,\n          trailingSpace: s.trailingSpace,\n          trailingSpaceNewLine: s.trailingSpaceNewLine,\n          md_inside: s.md_inside,\n          fencedEndRE: s.fencedEndRE\n        };\n      },\n      token: function token(stream, state) {\n        // Reset state.formatting\n        state.formatting = false;\n\n        if (stream != state.thisLine.stream) {\n          state.header = 0;\n          state.hr = false;\n\n          if (stream.match(/^\\s*$/, true)) {\n            blankLine(state);\n            return null;\n          }\n\n          state.prevLine = state.thisLine;\n          state.thisLine = {\n            stream: stream\n          }; // Reset state.taskList\n\n          state.taskList = false; // Reset state.trailingSpace\n\n          state.trailingSpace = 0;\n          state.trailingSpaceNewLine = false;\n\n          if (!state.localState) {\n            state.f = state.block;\n\n            if (state.f != htmlBlock) {\n              var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, expandedTab).length;\n              state.indentation = indentation;\n              state.indentationDiff = null;\n              if (indentation > 0) return null;\n            }\n          }\n        }\n\n        return state.f(stream, state);\n      },\n      innerMode: function innerMode(state) {\n        if (state.block == htmlBlock) return {\n          state: state.htmlState,\n          mode: htmlMode\n        };\n        if (state.localState) return {\n          state: state.localState,\n          mode: state.localMode\n        };\n        return {\n          state: state,\n          mode: mode\n        };\n      },\n      indent: function indent(state, textAfter, line) {\n        if (state.block == htmlBlock && htmlMode.indent) return htmlMode.indent(state.htmlState, textAfter, line);\n        if (state.localState && state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);\n        return CodeMirror.Pass;\n      },\n      blankLine: blankLine,\n      getType: getType,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      fold: \"markdown\"\n    };\n    return mode;\n  }, \"xml\");\n  CodeMirror.defineMIME(\"text/markdown\", \"markdown\");\n  CodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var htmlConfig = {\n    autoSelfClosers: {\n      'area': true,\n      'base': true,\n      'br': true,\n      'col': true,\n      'command': true,\n      'embed': true,\n      'frame': true,\n      'hr': true,\n      'img': true,\n      'input': true,\n      'keygen': true,\n      'link': true,\n      'meta': true,\n      'param': true,\n      'source': true,\n      'track': true,\n      'wbr': true,\n      'menuitem': true\n    },\n    implicitlyClosed: {\n      'dd': true,\n      'li': true,\n      'optgroup': true,\n      'option': true,\n      'p': true,\n      'rp': true,\n      'rt': true,\n      'tbody': true,\n      'td': true,\n      'tfoot': true,\n      'th': true,\n      'tr': true\n    },\n    contextGrabbers: {\n      'dd': {\n        'dd': true,\n        'dt': true\n      },\n      'dt': {\n        'dd': true,\n        'dt': true\n      },\n      'li': {\n        'li': true\n      },\n      'option': {\n        'option': true,\n        'optgroup': true\n      },\n      'optgroup': {\n        'optgroup': true\n      },\n      'p': {\n        'address': true,\n        'article': true,\n        'aside': true,\n        'blockquote': true,\n        'dir': true,\n        'div': true,\n        'dl': true,\n        'fieldset': true,\n        'footer': true,\n        'form': true,\n        'h1': true,\n        'h2': true,\n        'h3': true,\n        'h4': true,\n        'h5': true,\n        'h6': true,\n        'header': true,\n        'hgroup': true,\n        'hr': true,\n        'menu': true,\n        'nav': true,\n        'ol': true,\n        'p': true,\n        'pre': true,\n        'section': true,\n        'table': true,\n        'ul': true\n      },\n      'rp': {\n        'rp': true,\n        'rt': true\n      },\n      'rt': {\n        'rp': true,\n        'rt': true\n      },\n      'tbody': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'td': {\n        'td': true,\n        'th': true\n      },\n      'tfoot': {\n        'tbody': true\n      },\n      'th': {\n        'td': true,\n        'th': true\n      },\n      'thead': {\n        'tbody': true,\n        'tfoot': true\n      },\n      'tr': {\n        'tr': true\n      }\n    },\n    doNotIndent: {\n      \"pre\": true\n    },\n    allowUnquoted: true,\n    allowMissing: true,\n    caseFold: true\n  };\n  var xmlConfig = {\n    autoSelfClosers: {},\n    implicitlyClosed: {},\n    contextGrabbers: {},\n    doNotIndent: {},\n    allowUnquoted: false,\n    allowMissing: false,\n    allowMissingTagName: false,\n    caseFold: false\n  };\n  CodeMirror.defineMode(\"xml\", function (editorConf, config_) {\n    var indentUnit = editorConf.indentUnit;\n    var config = {};\n    var defaults = config_.htmlMode ? htmlConfig : xmlConfig;\n\n    for (var prop in defaults) {\n      config[prop] = defaults[prop];\n    }\n\n    for (var prop in config_) {\n      config[prop] = config_[prop];\n    } // Return variables for tokenizers\n\n\n    var type, setStyle;\n\n    function inText(stream, state) {\n      function chain(parser) {\n        state.tokenize = parser;\n        return parser(stream, state);\n      }\n\n      var ch = stream.next();\n\n      if (ch == \"<\") {\n        if (stream.eat(\"!\")) {\n          if (stream.eat(\"[\")) {\n            if (stream.match(\"CDATA[\")) return chain(inBlock(\"atom\", \"]]>\"));else return null;\n          } else if (stream.match(\"--\")) {\n            return chain(inBlock(\"comment\", \"-->\"));\n          } else if (stream.match(\"DOCTYPE\", true, true)) {\n            stream.eatWhile(/[\\w\\._\\-]/);\n            return chain(doctype(1));\n          } else {\n            return null;\n          }\n        } else if (stream.eat(\"?\")) {\n          stream.eatWhile(/[\\w\\._\\-]/);\n          state.tokenize = inBlock(\"meta\", \"?>\");\n          return \"meta\";\n        } else {\n          type = stream.eat(\"/\") ? \"closeTag\" : \"openTag\";\n          state.tokenize = inTag;\n          return \"tag bracket\";\n        }\n      } else if (ch == \"&\") {\n        var ok;\n\n        if (stream.eat(\"#\")) {\n          if (stream.eat(\"x\")) {\n            ok = stream.eatWhile(/[a-fA-F\\d]/) && stream.eat(\";\");\n          } else {\n            ok = stream.eatWhile(/[\\d]/) && stream.eat(\";\");\n          }\n        } else {\n          ok = stream.eatWhile(/[\\w\\.\\-:]/) && stream.eat(\";\");\n        }\n\n        return ok ? \"atom\" : \"error\";\n      } else {\n        stream.eatWhile(/[^&<]/);\n        return null;\n      }\n    }\n\n    inText.isInText = true;\n\n    function inTag(stream, state) {\n      var ch = stream.next();\n\n      if (ch == \">\" || ch == \"/\" && stream.eat(\">\")) {\n        state.tokenize = inText;\n        type = ch == \">\" ? \"endTag\" : \"selfcloseTag\";\n        return \"tag bracket\";\n      } else if (ch == \"=\") {\n        type = \"equals\";\n        return null;\n      } else if (ch == \"<\") {\n        state.tokenize = inText;\n        state.state = baseState;\n        state.tagName = state.tagStart = null;\n        var next = state.tokenize(stream, state);\n        return next ? next + \" tag error\" : \"tag error\";\n      } else if (/[\\'\\\"]/.test(ch)) {\n        state.tokenize = inAttribute(ch);\n        state.stringStartCol = stream.column();\n        return state.tokenize(stream, state);\n      } else {\n        stream.match(/^[^\\s\\u00a0=<>\\\"\\']*[^\\s\\u00a0=<>\\\"\\'\\/]/);\n        return \"word\";\n      }\n    }\n\n    function inAttribute(quote) {\n      var closure = function closure(stream, state) {\n        while (!stream.eol()) {\n          if (stream.next() == quote) {\n            state.tokenize = inTag;\n            break;\n          }\n        }\n\n        return \"string\";\n      };\n\n      closure.isInAttribute = true;\n      return closure;\n    }\n\n    function inBlock(style, terminator) {\n      return function (stream, state) {\n        while (!stream.eol()) {\n          if (stream.match(terminator)) {\n            state.tokenize = inText;\n            break;\n          }\n\n          stream.next();\n        }\n\n        return style;\n      };\n    }\n\n    function doctype(depth) {\n      return function (stream, state) {\n        var ch;\n\n        while ((ch = stream.next()) != null) {\n          if (ch == \"<\") {\n            state.tokenize = doctype(depth + 1);\n            return state.tokenize(stream, state);\n          } else if (ch == \">\") {\n            if (depth == 1) {\n              state.tokenize = inText;\n              break;\n            } else {\n              state.tokenize = doctype(depth - 1);\n              return state.tokenize(stream, state);\n            }\n          }\n        }\n\n        return \"meta\";\n      };\n    }\n\n    function Context(state, tagName, startOfLine) {\n      this.prev = state.context;\n      this.tagName = tagName;\n      this.indent = state.indented;\n      this.startOfLine = startOfLine;\n      if (config.doNotIndent.hasOwnProperty(tagName) || state.context && state.context.noIndent) this.noIndent = true;\n    }\n\n    function popContext(state) {\n      if (state.context) state.context = state.context.prev;\n    }\n\n    function maybePopContext(state, nextTagName) {\n      var parentTagName;\n\n      while (true) {\n        if (!state.context) {\n          return;\n        }\n\n        parentTagName = state.context.tagName;\n\n        if (!config.contextGrabbers.hasOwnProperty(parentTagName) || !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n          return;\n        }\n\n        popContext(state);\n      }\n    }\n\n    function baseState(type, stream, state) {\n      if (type == \"openTag\") {\n        state.tagStart = stream.column();\n        return tagNameState;\n      } else if (type == \"closeTag\") {\n        return closeTagNameState;\n      } else {\n        return baseState;\n      }\n    }\n\n    function tagNameState(type, stream, state) {\n      if (type == \"word\") {\n        state.tagName = stream.current();\n        setStyle = \"tag\";\n        return attrState;\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return attrState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return tagNameState;\n      }\n    }\n\n    function closeTagNameState(type, stream, state) {\n      if (type == \"word\") {\n        var tagName = stream.current();\n        if (state.context && state.context.tagName != tagName && config.implicitlyClosed.hasOwnProperty(state.context.tagName)) popContext(state);\n\n        if (state.context && state.context.tagName == tagName || config.matchClosing === false) {\n          setStyle = \"tag\";\n          return closeState;\n        } else {\n          setStyle = \"tag error\";\n          return closeStateErr;\n        }\n      } else if (config.allowMissingTagName && type == \"endTag\") {\n        setStyle = \"tag bracket\";\n        return closeState(type, stream, state);\n      } else {\n        setStyle = \"error\";\n        return closeStateErr;\n      }\n    }\n\n    function closeState(type, _stream, state) {\n      if (type != \"endTag\") {\n        setStyle = \"error\";\n        return closeState;\n      }\n\n      popContext(state);\n      return baseState;\n    }\n\n    function closeStateErr(type, stream, state) {\n      setStyle = \"error\";\n      return closeState(type, stream, state);\n    }\n\n    function attrState(type, _stream, state) {\n      if (type == \"word\") {\n        setStyle = \"attribute\";\n        return attrEqState;\n      } else if (type == \"endTag\" || type == \"selfcloseTag\") {\n        var tagName = state.tagName,\n            tagStart = state.tagStart;\n        state.tagName = state.tagStart = null;\n\n        if (type == \"selfcloseTag\" || config.autoSelfClosers.hasOwnProperty(tagName)) {\n          maybePopContext(state, tagName);\n        } else {\n          maybePopContext(state, tagName);\n          state.context = new Context(state, tagName, tagStart == state.indented);\n        }\n\n        return baseState;\n      }\n\n      setStyle = \"error\";\n      return attrState;\n    }\n\n    function attrEqState(type, stream, state) {\n      if (type == \"equals\") return attrValueState;\n      if (!config.allowMissing) setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrValueState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n\n      if (type == \"word\" && config.allowUnquoted) {\n        setStyle = \"string\";\n        return attrState;\n      }\n\n      setStyle = \"error\";\n      return attrState(type, stream, state);\n    }\n\n    function attrContinuedState(type, stream, state) {\n      if (type == \"string\") return attrContinuedState;\n      return attrState(type, stream, state);\n    }\n\n    return {\n      startState: function startState(baseIndent) {\n        var state = {\n          tokenize: inText,\n          state: baseState,\n          indented: baseIndent || 0,\n          tagName: null,\n          tagStart: null,\n          context: null\n        };\n        if (baseIndent != null) state.baseIndent = baseIndent;\n        return state;\n      },\n      token: function token(stream, state) {\n        if (!state.tagName && stream.sol()) state.indented = stream.indentation();\n        if (stream.eatSpace()) return null;\n        type = null;\n        var style = state.tokenize(stream, state);\n\n        if ((style || type) && style != \"comment\") {\n          setStyle = null;\n          state.state = state.state(type || style, stream, state);\n          if (setStyle) style = setStyle == \"error\" ? style + \" error\" : setStyle;\n        }\n\n        return style;\n      },\n      indent: function indent(state, textAfter, fullLine) {\n        var context = state.context; // Indent multi-line strings (e.g. css).\n\n        if (state.tokenize.isInAttribute) {\n          if (state.tagStart == state.indented) return state.stringStartCol + 1;else return state.indented + indentUnit;\n        }\n\n        if (context && context.noIndent) return CodeMirror.Pass;\n        if (state.tokenize != inTag && state.tokenize != inText) return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0; // Indent the starts of attribute names.\n\n        if (state.tagName) {\n          if (config.multilineTagIndentPastTag !== false) return state.tagStart + state.tagName.length + 2;else return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n        }\n\n        if (config.alignCDATA && /<!\\[CDATA\\[/.test(textAfter)) return 0;\n        var tagAfter = textAfter && /^<(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n\n        if (tagAfter && tagAfter[1]) {\n          // Closing tag spotted\n          while (context) {\n            if (context.tagName == tagAfter[2]) {\n              context = context.prev;\n              break;\n            } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\n              context = context.prev;\n            } else {\n              break;\n            }\n          }\n        } else if (tagAfter) {\n          // Opening tag spotted\n          while (context) {\n            var grabbers = config.contextGrabbers[context.tagName];\n            if (grabbers && grabbers.hasOwnProperty(tagAfter[2])) context = context.prev;else break;\n          }\n        }\n\n        while (context && context.prev && !context.startOfLine) {\n          context = context.prev;\n        }\n\n        if (context) return context.indent + indentUnit;else return state.baseIndent || 0;\n      },\n      electricInput: /<\\/[\\s\\w:]+>$/,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      configuration: config.htmlMode ? \"html\" : \"xml\",\n      helperType: config.htmlMode ? \"html\" : \"xml\",\n      skipAttribute: function skipAttribute(state) {\n        if (state.state == attrValueState) state.state = attrState;\n      },\n      xmlCurrentTag: function xmlCurrentTag(state) {\n        return state.tagName ? {\n          name: state.tagName,\n          close: state.type == \"closeTag\"\n        } : null;\n      },\n      xmlCurrentContext: function xmlCurrentContext(state) {\n        var context = [];\n\n        for (var cx = state.context; cx; cx = cx.prev) {\n          if (cx.tagName) context.push(cx.tagName);\n        }\n\n        return context.reverse();\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/xml\", \"xml\");\n  CodeMirror.defineMIME(\"application/xml\", \"xml\");\n  if (!CodeMirror.mimeModes.hasOwnProperty(\"text/html\")) CodeMirror.defineMIME(\"text/html\", {\n    name: \"xml\",\n    htmlMode: true\n  });\n});"],"sourceRoot":""}